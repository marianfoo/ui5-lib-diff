{"version":3,"file":"BaseController.js","names":["BaseController","Controller","extend","getOwnerComponent","_getOwnerComponent","Controller.prototype.getOwnerComponent.call","this","getRouter","_getRouter","UIComponent","getRouterFor","copyLinkToClipboard","async","_copyLinkToClipboard","event","resourceBundle","getView","getModel","getResourceBundle","navigator","clipboard","writeText","window","location","href","MessageToast","show","dummy","document","createElement","body","appendChild","setAttribute","select","execCommand","removeChild","error","console","_getResourceBundle","oModel","_getModel","sName","setModel","_setModel","navTo","_navTo","oParameters","bReplace","undefined","onNavBack","_onNavBack","sPreviousHash","History","getInstance","getPreviousHash","history","go"],"sources":["BaseController.ts"],"sourcesContent":["import Controller from \"sap/ui/core/mvc/Controller\";\nimport UIComponent from \"sap/ui/core/UIComponent\";\nimport AppComponent from \"../Component\";\nimport Model from \"sap/ui/model/Model\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport Router from \"sap/ui/core/routing/Router\";\nimport History from \"sap/ui/core/routing/History\";\nimport MessageToast from \"sap/m/MessageToast\";\n\n/**\n * @namespace de.marianzeis.ui5libdiff.controller\n */\nexport default abstract class BaseController extends Controller {\n\t/**\n\t * Convenience method for accessing the component of the controller's view.\n\t * @returns The component of the controller's view\n\t */\n\tpublic getOwnerComponent(): AppComponent {\n\t\treturn super.getOwnerComponent() as AppComponent;\n\t}\n\n\t/**\n\t * Convenience method to get the components' router instance.\n\t * @returns The router instance\n\t */\n\tpublic getRouter(): Router {\n\t\treturn UIComponent.getRouterFor(this);\n\t}\n\n\tpublic async copyLinkToClipboard(event: Event): Promise<void> {\n\t\tconst resourceBundle = <ResourceBundle>(this.getView().getModel(\"i18n\") as ResourceModel).getResourceBundle();\n\t\ttry {\n\t\t\t// try using standard clipboard API\n\t\t\tif (\"clipboard\" in navigator) {\n\t\t\t\tawait navigator.clipboard.writeText(window.location.href);\n\t\t\t\treturn MessageToast.show(\"Link copied to clipboard\");\n\t\t\t}\n\t\t\t// fallback if clipboard API is not supported\n\t\t\tconst dummy = document.createElement(\"input\");\n\t\t\tdocument.body.appendChild(dummy);\n\t\t\tdummy.setAttribute(\"value\", window.location.href);\n\t\t\tdummy.select();\n\t\t\tdocument.execCommand(\"copy\");\n\t\t\tdocument.body.removeChild(dummy);\n\t\t\tMessageToast.show(\"Link copied to clipboard\")\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tMessageToast.show(\"Link copied to clipboard failed\")\n\t\t}\n\t}\n\n\t/**\n\t * Convenience method for getting the i18n resource bundle of the component.\n\t * @returns The i18n resource bundle of the component\n\t */\n\tpublic getResourceBundle(): ResourceBundle | Promise<ResourceBundle> {\n\t\tconst oModel = this.getOwnerComponent().getModel(\"i18n\") as ResourceModel;\n\t\treturn oModel.getResourceBundle();\n\t}\n\n\t/**\n\t * Convenience method for getting the view model by name in every controller of the application.\n\t * @param [sName] The model name\n\t * @returns The model instance\n\t */\n\tpublic getModel(sName?: string): Model {\n\t\treturn this.getView().getModel(sName);\n\t}\n\n\t/**\n\t * Convenience method for setting the view model in every controller of the application.\n\t * @param oModel The model instance\n\t * @param [sName] The model name\n\t * @returns The current base controller instance\n\t */\n\tpublic setModel(oModel: Model, sName?: string): BaseController {\n\t\tthis.getView().setModel(oModel, sName);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Convenience method for triggering the navigation to a specific target.\n\t * @public\n\t * @param sName Target name\n\t * @param [oParameters] Navigation parameters\n\t * @param [bReplace] Defines if the hash should be replaced (no browser history entry) or set (browser history entry)\n\t */\n\tpublic navTo(sName: string, oParameters?: object, bReplace?: boolean): void {\n\t\tthis.getRouter().navTo(sName, oParameters, undefined, bReplace);\n\t}\n\n\t/**\n\t * Convenience event handler for navigating back.\n\t * It there is a history entry we go one step back in the browser history\n\t * If not, it will replace the current entry of the browser history with the main route.\n\t */\n\tpublic onNavBack(): void {\n\t\tconst sPreviousHash = History.getInstance().getPreviousHash();\n\t\tif (sPreviousHash !== undefined) {\n\t\t\twindow.history.go(-1);\n\t\t} else {\n\t\t\tthis.getRouter().navTo(\"main\", {}, undefined, true);\n\t\t}\n\t}\n}\n"],"mappings":"sKAUA,MAG8BA,EAAuBC,EAAUC,OAAA,sDAKvDC,kBAAiB,SAAAC,IACvB,OAAAC,mCAAAC,KACD,EAMOC,UAAS,SAAAC,IACf,OAAOC,EAAYC,aAAaJ,KACjC,EAEaK,oBAAmBC,eAAAC,EAACC,GAChC,MAAMC,EAAkCT,KAAKU,UAAUC,SAAS,QAA0BC,oBAC1F,IAEC,GAAI,cAAeC,UAAW,OACvBA,UAAUC,UAAUC,UAAUC,OAAOC,SAASC,MACpD,OAAOC,EAAaC,KAAK,2BAC1B,CAEA,MAAMC,EAAQC,SAASC,cAAc,SACrCD,SAASE,KAAKC,YAAYJ,GAC1BA,EAAMK,aAAa,QAASV,OAAOC,SAASC,MAC5CG,EAAMM,SACNL,SAASM,YAAY,QACrBN,SAASE,KAAKK,YAAYR,GAC1BF,EAAaC,KAAK,2BACnB,CAAE,MAAOU,GACRC,QAAQD,MAAMA,GACdX,EAAaC,KAAK,kCACnB,CACD,EAMOR,kBAAiB,SAAAoB,IACvB,MAAMC,EAASjC,KAAKH,oBAAoBc,SAAS,QACjD,OAAOsB,EAAOrB,mBACf,EAOOD,SAAQ,SAAAuB,EAACC,GACf,OAAOnC,KAAKU,UAAUC,SAASwB,EAChC,EAQOC,SAAQ,SAAAC,EAACJ,EAAeE,GAC9BnC,KAAKU,UAAU0B,SAASH,EAAQE,GAChC,OAAOnC,IACR,EASOsC,MAAK,SAAAC,EAACJ,EAAeK,EAAsBC,GACjDzC,KAAKC,YAAYqC,MAAMH,EAAOK,EAAaE,UAAWD,EACvD,EAOOE,UAAS,SAAAC,IACf,MAAMC,EAAgBC,EAAQC,cAAcC,kBAC5C,GAAIH,IAAkBH,UAAW,CAChC1B,OAAOiC,QAAQC,IAAI,EACpB,KAAO,CACNlD,KAAKC,YAAYqC,MAAM,OAAQ,CAAC,EAAGI,UAAW,KAC/C,CACD,IAAC,OA3F4BhD,CAAc","ignoreList":[]}